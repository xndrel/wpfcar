<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PdfSharp.Shared</name>
    </assembly>
    <members>
        <member name="T:PdfSharp.Diagnostics.NRT">
            <summary>
            Helper class for code migration to nullable reference types.
            </summary>
        </member>
        <member name="M:PdfSharp.Diagnostics.NRT.ThrowOnNull(System.String)">
            <summary>
            Throws an InvalidOperationException because an expression which must not be null is null.
            </summary>
            <param name="message">The message.</param>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:PdfSharp.Diagnostics.NRT.ThrowOnNull``1(System.String)">
            <summary>
            Throws InvalidOperationException. Use this function during the transition from older C# code
            to new code that uses nullable reference types.
            </summary>
            <typeparam name="TResult">The type this function must return to be compiled correctly.</typeparam>
            <param name="message">An optional message used for the exception.</param>
            <returns>Nothing, always throws.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:PdfSharp.Diagnostics.NRT.ThrowOnNull``2(System.String)">
            <summary>
            Throws InvalidOperationException. Use this function during the transition from older C# code
            to new code that uses nullable reference types.
            </summary>
            <typeparam name="TResult">The type this function must return to be compiled correctly.</typeparam>
            <typeparam name="TType">The type of the object that is null.</typeparam>
            <param name="message">An optional message used for the exception.</param>
            <returns>Nothing, always throws.</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="T:PdfSharp.Internal.SyMsgId">
            <summary>
            System message ID.
            </summary>
        </member>
        <member name="T:PdfSharp.Internal.MessageIdOffset">
            <summary>
            Offsets to ensure that all message IDs are pairwise distinct
            within PDFsharp foundation.
            </summary>
        </member>
        <member name="T:PdfSharp.Internal.PdfSharpGitVersionInformation">
            <summary>
            Product version information from git version tool.
            </summary>
        </member>
        <member name="F:PdfSharp.Internal.PdfSharpGitVersionInformation.Major">
            <summary>
            The major version number of the product.
            </summary>
        </member>
        <member name="F:PdfSharp.Internal.PdfSharpGitVersionInformation.Minor">
            <summary>
            The minor version number of the product.
            </summary>
        </member>
        <member name="F:PdfSharp.Internal.PdfSharpGitVersionInformation.Patch">
            <summary>
            The patch number of the product.
            </summary>
        </member>
        <member name="F:PdfSharp.Internal.PdfSharpGitVersionInformation.PreReleaseLabel">
            <summary>
            The Version pre-release string for NuGet.
            </summary>
        </member>
        <member name="F:PdfSharp.Internal.PdfSharpGitVersionInformation.MajorMinorPatch">
            <summary>
            The full version number.
            </summary>
        </member>
        <member name="F:PdfSharp.Internal.PdfSharpGitVersionInformation.SemVer">
            <summary>
            The full semantic version number created by GitVersion.
            </summary>
        </member>
        <member name="F:PdfSharp.Internal.PdfSharpGitVersionInformation.InformationalVersion">
            <summary>
            The full informational version number created by GitVersion.
            </summary>
        </member>
        <member name="F:PdfSharp.Internal.PdfSharpGitVersionInformation.BranchName">
            <summary>
            The branch name of the product.
            </summary>
        </member>
        <member name="F:PdfSharp.Internal.PdfSharpGitVersionInformation.CommitDate">
            <summary>
            The commit date of the product.
            </summary>
        </member>
        <member name="T:PdfSharp.Internal.SyMsg">
            <summary>
            (PDFsharp) System message.
            </summary>
        </member>
        <member name="M:PdfSharp.Internal.SyMsg.#ctor(PdfSharp.Internal.SyMsgId,System.String)">
            <summary>
            (PDFsharp) System message.
            </summary>
        </member>
        <member name="T:PdfSharp.Internal.SyMsgs">
            <summary>
            (PDFsharp) System message.
            </summary>
        </member>
        <member name="T:PdfSharp.Internal.TH2">
            <summary>
            Experimental throw helper.
            </summary>
        </member>
        <member name="T:PdfSharp.Internal.UrlLiterals">
            <summary>
            URLs used in PDFsharp are maintained only here.
            </summary>
        </member>
        <member name="F:PdfSharp.Internal.UrlLiterals.LinkToRoot">
            <summary>
            URL for index page.
            "https://docs.pdfsharp.net/"
            </summary>
        </member>
        <member name="F:PdfSharp.Internal.UrlLiterals.LinkToAssetsDoc">
            <summary>
            URL for missing assets error message.
            "https://docs.pdfsharp.net/link/download-assets.html"
            </summary>
        </member>
        <member name="F:PdfSharp.Internal.UrlLiterals.LinkToFontResolving">
            <summary>
            URL for missing font resolver.
            "https://docs.pdfsharp.net/link/font-resolving.html"
            </summary>
        </member>
        <member name="F:PdfSharp.Internal.UrlLiterals.LinkToMigraDocFontResolving">
            <summary>
            URL for missing MigraDoc error font.
            "https://docs.pdfsharp.net/link/migradoc-font-resolving-6.2.html"
            </summary>
        </member>
        <member name="F:PdfSharp.Internal.UrlLiterals.LinkToCannotOpenPdfFile">
            <summary>
            URL shown when a PDF file cannot be opened/parsed.
            "https://docs.pdfsharp.net/link/cannot-open-pdf-6.2.html"
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Required to compile init-only setters in .NET Standard and .NET Framework 4.71.
            </summary>
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don’t validate the input length parameter and the returned offset value against negative values.
            we don’t validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non-negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don’t validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non-negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="M:StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            String.Contains implementation for .NET Framework and .NET Standard as an extension method.
            </summary>
        </member>
    </members>
</doc>
