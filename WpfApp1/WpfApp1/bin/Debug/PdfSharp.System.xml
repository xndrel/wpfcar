<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PdfSharp.System</name>
    </assembly>
    <members>
        <member name="T:PdfSharp.SystemStringExtensions">
            <summary>
            Extension methods for functionality missing in .NET Framework.
            </summary>
        </member>
        <member name="M:PdfSharp.SystemStringExtensions.StartsWith(System.String,System.Char)">
            <summary>
            Brings "bool StartsWith(char value)" to String class.
            </summary>
        </member>
        <member name="T:PdfSharp.IO_dummy.StreamToMemoryReader">
            <summary>
            Reads any stream into a Memory&lt;byte&gt;.
            </summary>
        </member>
        <member name="M:PdfSharp.IO_dummy.StreamToMemoryReader.#ctor(System.IO.Stream)">
            <summary>
            Reads any stream into a Memory&lt;byte&gt;.
            </summary>
        </member>
        <member name="M:PdfSharp.IO_dummy.StreamToMemoryReader.ReadToEnd">
            <summary>
            Reads a stream to the end.
            </summary>
        </member>
        <member name="T:PdfSharp.Logging.LogCategory">
            <summary>
            Defines the logging categories of PDFsharp.
            </summary>
        </member>
        <member name="F:PdfSharp.Logging.LogCategory.PdfSharp">
            <summary>
            Default category for standard logger.
            </summary>
        </member>
        <member name="T:PdfSharp.Logging.LogHost">
            <summary>
            Provides a single global logger factory used for logging in PDFsharp.
            </summary>
        </member>
        <member name="P:PdfSharp.Logging.LogHost.Factory">
            <summary>
            Gets or sets the current global logger factory singleton for PDFsharp.
            Every logger used in PDFsharp code is created by this factory.
            You can change the logger factory at any one time you want.
            If no factory is provided the NullLoggerFactory is used as the default.
            </summary>
        </member>
        <member name="P:PdfSharp.Logging.LogHost.Logger">
            <summary>
            Gets the global PDFsharp default logger.
            </summary>
        </member>
        <member name="M:PdfSharp.Logging.LogHost.CreateLogger(System.String)">
            <summary>
            Creates a logger with a given category name.
            </summary>
        </member>
        <member name="M:PdfSharp.Logging.LogHost.CreateLogger``1">
            <summary>
            Creates a logger with the full name of the given type as category name.
            </summary>
        </member>
        <member name="M:PdfSharp.Logging.LogHost.ResetLogging">
            <summary>
            Resets the logging host to the state it has immediately after loading the PDFsharp library.
            </summary>
            <remarks>
            This function is only useful in unit test scenarios and not intended to be called from application code.
            </remarks>
        </member>
        <member name="T:PdfSharp.Pdf.Signatures.PdfMessageDigestType">
            <summary>
            Specifies the algorithm used to generate the message digest.
            </summary>
        </member>
        <member name="F:PdfSharp.Pdf.Signatures.PdfMessageDigestType.SHA1">
            <summary>
            (PDF 1.3)
            </summary>
        </member>
        <member name="F:PdfSharp.Pdf.Signatures.PdfMessageDigestType.SHA256">
            <summary>
            (PDF 1.6)
            </summary>
        </member>
        <member name="F:PdfSharp.Pdf.Signatures.PdfMessageDigestType.SHA384">
            <summary>
            (PDF 1.7)
            </summary>
        </member>
        <member name="F:PdfSharp.Pdf.Signatures.PdfMessageDigestType.SHA512">
            <summary>
            (PDF 1.7)
            </summary>
        </member>
        <member name="F:PdfSharp.Pdf.Signatures.PdfMessageDigestType.RIPEMD160">
            <summary>
            (PDF 1.7)
            </summary>
        </member>
        <member name="T:PdfSharp.Pdf.Signatures.IDigitalSigner">
            <summary>
            Interface for classes that generate digital signatures.
            </summary>
        </member>
        <member name="P:PdfSharp.Pdf.Signatures.IDigitalSigner.CertificateName">
            <summary>
            Gets a human-readable name of the used certificate.
            </summary>
        </member>
        <member name="M:PdfSharp.Pdf.Signatures.IDigitalSigner.GetSignatureSizeAsync">
            <summary>
            Gets the size of the signature in bytes.
            The size is used to reserve space in the PDF file that is later filled with the signature.
            </summary>
        </member>
        <member name="M:PdfSharp.Pdf.Signatures.IDigitalSigner.GetSignatureAsync(System.IO.Stream)">
            <summary>
            Gets the signatures of the specified stream.
            </summary>
            <param name="stream"></param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute">
             <summary>
             Indicates that certain members on a specified <see cref="T:System.Type"/> are accessed dynamically,
             for example through <see cref="N:System.Reflection"/>.
             </summary>
             <remarks>
             This allows tools to understand which members are being accessed during the execution
             of a program.
            
             This attribute is valid on members whose type is <see cref="T:System.Type"/> or <see cref="T:System.String"/>.
            
             When this attribute is applied to a location of type <see cref="T:System.String"/>, the assumption is
             that the string represents a fully qualified type name.
            
             When this attribute is applied to a class, interface, or struct, the members specified
             can be accessed dynamically on <see cref="T:System.Type"/> instances returned from calling
             <see cref="M:System.Object.GetType"/> on instances of that class, interface, or struct.
            
             If the attribute is applied to a method it's treated as a special case and it implies
             the attribute should be applied to the "this" parameter of the method. As such the attribute
             should only be used on instance methods of types assignable to System.Type (or string, but no methods
             will use it there).
             </remarks>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.#ctor(System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute"/> class
            with the specified member types.
            </summary>
            <param name="memberTypes">The types of members dynamically accessed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMembersAttribute.MemberTypes">
            <summary>
            Gets the <see cref="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes"/> which specifies the type
            of members dynamically accessed.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes">
             <summary>
             Specifies the types of members that are dynamically accessed.
            
             This enumeration has a <see cref="T:System.FlagsAttribute"/> attribute that allows a
             bitwise combination of its member values.
             </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.None">
            <summary>
            Specifies no members.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicParameterlessConstructor">
            <summary>
            Specifies the default, parameterless public constructor.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicConstructors">
            <summary>
            Specifies all public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicConstructors">
            <summary>
            Specifies all non-public constructors.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicMethods">
            <summary>
            Specifies all public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicMethods">
            <summary>
            Specifies all non-public methods.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicFields">
            <summary>
            Specifies all public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicFields">
            <summary>
            Specifies all non-public fields.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicNestedTypes">
            <summary>
            Specifies all public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicNestedTypes">
            <summary>
            Specifies all non-public nested types.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicProperties">
            <summary>
            Specifies all public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicProperties">
            <summary>
            Specifies all non-public properties.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.PublicEvents">
            <summary>
            Specifies all public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.NonPublicEvents">
            <summary>
            Specifies all non-public events.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.Interfaces">
            <summary>
            Specifies all interfaces implemented by the type.
            </summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.DynamicallyAccessedMemberTypes.All">
            <summary>
            Specifies all members.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.RuntimeHelpers">
            <summary>
            Extension method GetSubArray required for the built-in range operator (e.g.'[1..9]').
            Fun fact: This class must be compiled into each assembly. If it is only visible through
            InternalsVisibleTo code will not compile with .NET Framework 4.6.2 and .NET Standard 2.0.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetSubArray``1(``0[],System.Range)">
            <summary>
            Slices the specified array using the specified range.
            </summary>
        </member>
    </members>
</doc>
